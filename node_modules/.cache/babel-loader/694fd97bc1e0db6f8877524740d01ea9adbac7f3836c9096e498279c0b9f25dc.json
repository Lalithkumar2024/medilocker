{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kumaran project\\\\medilocker\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Header from \"../components/Header\";\n// import Footer from \"../components/Footer\";\n\n// const Dashboard = ({ userName = \"Kumaran\" }) => {\n//   const [selectedDoctor, setSelectedDoctor] = useState(\"\");\n//   const [appointmentDate, setAppointmentDate] = useState(\"\");\n//   const [appointmentTime, setAppointmentTime] = useState(\"\");\n//   const [appointments, setAppointments] = useState([]);\n\n//   const doctors = [\n//     { name: \"Dr. John - Cardiologist\", unavailableTimes: [\"10:00\", \"15:00\"] },\n//     { name: \"Dr. Smith - Dermatologist\", unavailableTimes: [\"12:30\", \"16:00\"] },\n//     { name: \"Dr. Sam - Neurologist\", unavailableTimes: [\"09:00\", \"14:00\"] },\n//     { name: \"Dr. Johnson - Orthopedic\", unavailableTimes: [\"11:00\", \"17:30\"] },\n//   ];\n\n//   const handleChange = (e) => {\n//     setSelectedDoctor(e.target.value);\n//   };\n\n//   const handleBookAppointment = () => {\n//     if (selectedDoctor && appointmentDate && appointmentTime) {\n//       const newAppointment = {\n//         doctor: selectedDoctor,\n//         date: appointmentDate,\n//         time: appointmentTime,\n//       };\n\n//       setAppointments([...appointments, newAppointment]);\n//       setSelectedDoctor(\"\");\n//       setAppointmentDate(\"\");\n//       setAppointmentTime(\"\");\n//     }\n//   };\n\n//   const handleCancelAppointment = (index) => {\n//     const updatedAppointments = appointments.filter((_, i) => i !== index);\n//     setAppointments(updatedAppointments);\n//   };\n\n//   const getUnavailableTimes = () => {\n//     const doctor = doctors.find((doc) => doc.name === selectedDoctor);\n//     return doctor ? doctor.unavailableTimes : [];\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <Header/>\n//         <section className=\"dashboardsection\">\n//           <div className=\"container mt-4\">\n//             <h2 className=\"text-start\">Dashboard</h2>\n//             <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\n//             <div className=\"mt-4\">\n//               <h4>Book an Appointment</h4>\n//               <hr className=\"border border-3 border-success\" />\n\n//               <div className=\"row g-3 mt-2\">\n//                 <div className=\"col-md-4\">\n//                   <div className=\"form-floating\">\n//                     <select\n//                       className=\"form-control\"\n//                       id=\"floatingDoctor\"\n//                       value={selectedDoctor}\n//                       onChange={handleChange}\n//                     >\n//                       <option value=\"\">Select a Doctor</option>\n//                       {doctors.map((doctor, index) => (\n//                         <option key={index} value={doctor.name}>\n//                           {doctor.name}\n//                         </option>\n//                       ))}\n//                     </select>\n//                     <label htmlFor=\"floatingDoctor\">Choose a Doctor</label>\n//                   </div>\n//                 </div>\n//                 <div className=\"col-md-4\">\n//                   <div className=\"form-floating\">\n//                     <input\n//                       type=\"date\"\n//                       className=\"form-control\"\n//                       id=\"floatingDate\"\n//                       value={appointmentDate}\n//                       onChange={(e) => setAppointmentDate(e.target.value)}\n//                     />\n//                     <label htmlFor=\"floatingDate\">Select Date</label>\n//                   </div>\n//                 </div>\n//                 <div className=\"col-md-4\">\n//                   <div className=\"form-floating\">\n//                     <input\n//                       type=\"time\"\n//                       className=\"form-control\"\n//                       id=\"floatingTime\"\n//                       value={appointmentTime}\n//                       onChange={(e) => setAppointmentTime(e.target.value)}\n//                       disabled={!selectedDoctor}\n//                     />\n//                     <label htmlFor=\"floatingTime\">Select Time</label>\n//                   </div>\n//                   {selectedDoctor && getUnavailableTimes().includes(appointmentTime) && (\n//                     <p className=\"text-danger mt-2\"> This time slot is unavailable!</p>\n//                   )}\n//                 </div>\n//                 <div className=\"col-md-12 d-flex justify-content-end\">\n//                   <button\n//                     className=\"btn btn-success appointment-btn\"\n//                     onClick={handleBookAppointment}\n//                     disabled={\n//                       !selectedDoctor ||\n//                       !appointmentDate ||\n//                       !appointmentTime ||\n//                       getUnavailableTimes().includes(appointmentTime)\n//                     }\n//                   >\n//                     Book Appointment\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"mt-5\">\n//               <h4>My Appointments</h4>\n//               <hr className=\"border border-3 border-success\" />\n//               {appointments.length === 0 ? (\n//                 <p className=\"text-muted\">No active appointments.</p>\n//               ) : (\n//                 <ul className=\"list-group\">\n//                   {appointments.map((appointment, index) => (\n//                     <li key={index} className=\"list-group-item d-flex justify-content-between\">\n//                       <span>\n//                         {appointment.date} -  {appointment.time} - {appointment.doctor}\n//                       </span>\n//                       <button\n//                         className=\"btn btn-danger btn-sm\"\n//                         onClick={() => handleCancelAppointment(index)}\n//                       >\n//                         Cancel\n//                       </button>\n//                     </li>\n//                   ))}\n//                 </ul>\n//               )}\n//             </div>\n//           </div>\n//         </section>\n//       <Footer/>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useState, useEffect } from \"react\";\n// import Header from \"../components/Header\";\n// import Footer from \"../components/Footer\";\n// import { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\n// const Dashboard = ({ userName = \"Kumaran\" }) => {\n//   const [sugarData, setSugarData] = useState([]);\n//   const [beforeEating, setBeforeEating] = useState(\"\");\n//   const [afterEating, setAfterEating] = useState(\"\");\n//   const [selectedRange, setSelectedRange] = useState(\"week\");\n\n//   const getCurrentTime = () => {\n//     const now = new Date();\n//     return now.getHours() * 60 + now.getMinutes(); // Time in minutes\n//   };\n\n//   const isWithinTimeRange = () => {\n//     const timeNow = getCurrentTime();\n//     return timeNow >= 360 && timeNow <= 480; // 6:00 AM (360 mins) to 8:00 AM (480 mins)\n//   };\n\n//   const handleAddSugarData = () => {\n//     if (beforeEating && afterEating) {\n//       setSugarData([...sugarData, { time: new Date().toLocaleDateString(), beforeEating, afterEating }]);\n//       setBeforeEating(\"\");\n//       setAfterEating(\"\");\n//     }\n//   };\n\n//   // Generate placeholders for missing data (empty values for days not recorded)\n//   const generateChartData = () => {\n//     let dates = [];\n//     let today = new Date();\n//     for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\n//       let date = new Date(today);\n//       date.setDate(today.getDate() - i);\n//       dates.push(date.toLocaleDateString());\n//     }\n\n//     return dates\n//       .map((date) => {\n//         let entry = sugarData.find((data) => data.time === date);\n//         return entry\n//           ? entry\n//           : { time: date, beforeEating: null, afterEating: null }; // Leave gaps for missing data\n//       })\n//       .reverse();\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <Header />\n//       <section className=\"dashboardsection\">\n//         <div className=\"container mt-4\">\n//           <h2 className=\"text-start\">Dashboard</h2>\n//           <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\n\n//           {/* Sugar Level Form */}\n//           <div className=\"mt-4\">\n//             <h4>Track Your Sugar Levels</h4>\n//             <hr className=\"border border-3 border-success\" />\n//             <div className=\"row g-3\">\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <input\n//                     type=\"number\"\n//                     className=\"form-control\"\n//                     id=\"beforeEating\"\n//                     placeholder=\"Before Eating\"\n//                     value={beforeEating}\n//                     onChange={(e) => setBeforeEating(e.target.value)}\n//                     disabled={!isWithinTimeRange()}\n//                   />\n//                   <label htmlFor=\"beforeEating\">Sugar Level (Before Eating)</label>\n//                 </div>\n//               </div>\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <input\n//                     type=\"number\"\n//                     className=\"form-control\"\n//                     id=\"afterEating\"\n//                     placeholder=\"After Eating\"\n//                     value={afterEating}\n//                     onChange={(e) => setAfterEating(e.target.value)}\n//                     disabled={!isWithinTimeRange()}\n//                   />\n//                   <label htmlFor=\"afterEating\">Sugar Level (After Eating)</label>\n//                 </div>\n//               </div>\n//               <div className=\"col-md-4 d-flex align-items-center\">\n//                 <button\n//                   className=\"btn btn-success w-100\"\n//                   onClick={handleAddSugarData}\n//                   disabled={!isWithinTimeRange() || !beforeEating || !afterEating}\n//                 >\n//                   Add Data\n//                 </button>\n//               </div>\n//             </div>\n//             {!isWithinTimeRange() && <p className=\"text-danger mt-2\">Data can only be entered between 6 AM - 8 AM</p>}\n//           </div>\n\n//           {/* Toggle Graph Range */}\n//           <div className=\"mt-4\">\n//             <h4>Sugar Level Graph</h4>\n//             <hr className=\"border border-3 border-success\" />\n//             <div className=\"d-flex\">\n//               <button\n//                 className={`btn ${selectedRange === \"week\" ? \"btn-primary\" : \"btn-outline-primary\"} me-2`}\n//                 onClick={() => setSelectedRange(\"week\")}\n//               >\n//                 Weekly View\n//               </button>\n//               <button\n//                 className={`btn ${selectedRange === \"month\" ? \"btn-primary\" : \"btn-outline-primary\"}`}\n//                 onClick={() => setSelectedRange(\"month\")}\n//               >\n//                 Monthly View\n//               </button>\n//             </div>\n//           </div>\n\n//           {/* Sugar Level Graph */}\n//           <div className=\"mt-4\">\n//             <ResponsiveContainer width=\"100%\" height={300}>\n//               <LineChart data={generateChartData()}>\n//                 <XAxis dataKey=\"time\" />\n//                 <YAxis />\n//                 <Tooltip />\n//                 <Legend />\n//                 <Line type=\"monotone\" dataKey=\"beforeEating\" stroke=\"#8884d8\" strokeWidth={3} dot={{ r: 5 }} />\n//                 <Line type=\"monotone\" dataKey=\"afterEating\" stroke=\"#82ca9d\" strokeWidth={3} dot={{ r: 5 }} />\n//               </LineChart>\n//             </ResponsiveContainer>\n//           </div>\n//         </div>\n//       </section>\n//       <Footer />\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React, { useState } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  userName = \"Kumaran\"\n}) => {\n  _s();\n  const [sugarData, setSugarData] = useState([]);\n  const [beforeEating, setBeforeEating] = useState(\"\");\n  const [afterEating, setAfterEating] = useState(\"\");\n  const [selectedRange, setSelectedRange] = useState(\"week\");\n  const handleAddSugarData = () => {\n    if (beforeEating && afterEating) {\n      setSugarData([...sugarData, {\n        time: new Date().toLocaleDateString(),\n        beforeEating,\n        afterEating\n      }]);\n      setBeforeEating(\"\");\n      setAfterEating(\"\");\n    }\n  };\n\n  // Generate placeholders for missing data (empty values for days not recorded)\n  const generateChartData = () => {\n    let dates = [];\n    let today = new Date();\n    for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\n      let date = new Date(today);\n      date.setDate(today.getDate() - i);\n      dates.push(date.toLocaleDateString());\n    }\n    return dates.map(date => {\n      let entry = sugarData.find(data => data.time === date);\n      return entry ? entry : {\n        time: date,\n        beforeEating: null,\n        afterEating: null\n      }; // Leaves gaps in graph\n    }).reverse();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"dashboardsection\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-start\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-start mt-3\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Track Your Sugar Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"border border-3 border-success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row g-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  className: \"form-control\",\n                  id: \"beforeEating\",\n                  placeholder: \"Before Eating\",\n                  value: beforeEating,\n                  onChange: e => setBeforeEating(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"beforeEating\",\n                  children: \"Sugar Level (Before Eating)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  className: \"form-control\",\n                  id: \"afterEating\",\n                  placeholder: \"After Eating\",\n                  value: afterEating,\n                  onChange: e => setAfterEating(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"afterEating\",\n                  children: \"Sugar Level (After Eating)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4 d-flex align-items-center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success w-100\",\n                onClick: handleAddSugarData,\n                disabled: !beforeEating || !afterEating,\n                children: \"Add Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Sugar Level Graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"border border-3 border-success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn ${selectedRange === \"week\" ? \"btn-primary\" : \"btn-outline-primary\"} me-2`,\n              onClick: () => setSelectedRange(\"week\"),\n              children: \"Weekly View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn ${selectedRange === \"month\" ? \"btn-primary\" : \"btn-outline-primary\"}`,\n              onClick: () => setSelectedRange(\"month\"),\n              children: \"Monthly View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: generateChartData(),\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"beforeEating\",\n                stroke: \"#8884d8\",\n                strokeWidth: 3,\n                dot: {\n                  r: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"afterEating\",\n                stroke: \"#82ca9d\",\n                strokeWidth: 3,\n                dot: {\n                  r: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"lIINdgIKgYiSSqA8eRG1y96RsjA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","Header","Footer","LineChart","Line","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","Dashboard","userName","_s","sugarData","setSugarData","beforeEating","setBeforeEating","afterEating","setAfterEating","selectedRange","setSelectedRange","handleAddSugarData","time","Date","toLocaleDateString","generateChartData","dates","today","i","date","setDate","getDate","push","map","entry","find","data","reverse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","onChange","e","target","htmlFor","onClick","disabled","width","height","dataKey","stroke","strokeWidth","dot","r","_c","$RefreshReg$"],"sources":["D:/Kumaran project/medilocker/src/pages/Dashboard.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import Header from \"../components/Header\";\r\n// import Footer from \"../components/Footer\";\r\n\r\n// const Dashboard = ({ userName = \"Kumaran\" }) => {\r\n//   const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n//   const [appointmentDate, setAppointmentDate] = useState(\"\");\r\n//   const [appointmentTime, setAppointmentTime] = useState(\"\");\r\n//   const [appointments, setAppointments] = useState([]);\r\n\r\n//   const doctors = [\r\n//     { name: \"Dr. John - Cardiologist\", unavailableTimes: [\"10:00\", \"15:00\"] },\r\n//     { name: \"Dr. Smith - Dermatologist\", unavailableTimes: [\"12:30\", \"16:00\"] },\r\n//     { name: \"Dr. Sam - Neurologist\", unavailableTimes: [\"09:00\", \"14:00\"] },\r\n//     { name: \"Dr. Johnson - Orthopedic\", unavailableTimes: [\"11:00\", \"17:30\"] },\r\n//   ];\r\n\r\n//   const handleChange = (e) => {\r\n//     setSelectedDoctor(e.target.value);\r\n//   };\r\n\r\n//   const handleBookAppointment = () => {\r\n//     if (selectedDoctor && appointmentDate && appointmentTime) {\r\n//       const newAppointment = {\r\n//         doctor: selectedDoctor,\r\n//         date: appointmentDate,\r\n//         time: appointmentTime,\r\n//       };\r\n\r\n//       setAppointments([...appointments, newAppointment]);\r\n//       setSelectedDoctor(\"\");\r\n//       setAppointmentDate(\"\");\r\n//       setAppointmentTime(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const handleCancelAppointment = (index) => {\r\n//     const updatedAppointments = appointments.filter((_, i) => i !== index);\r\n//     setAppointments(updatedAppointments);\r\n//   };\r\n\r\n//   const getUnavailableTimes = () => {\r\n//     const doctor = doctors.find((doc) => doc.name === selectedDoctor);\r\n//     return doctor ? doctor.unavailableTimes : [];\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"dashboard\">\r\n//       <Header/>\r\n//         <section className=\"dashboardsection\">\r\n//           <div className=\"container mt-4\">\r\n//             <h2 className=\"text-start\">Dashboard</h2>\r\n//             <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\r\n//             <div className=\"mt-4\">\r\n//               <h4>Book an Appointment</h4>\r\n//               <hr className=\"border border-3 border-success\" />\r\n\r\n//               <div className=\"row g-3 mt-2\">\r\n//                 <div className=\"col-md-4\">\r\n//                   <div className=\"form-floating\">\r\n//                     <select\r\n//                       className=\"form-control\"\r\n//                       id=\"floatingDoctor\"\r\n//                       value={selectedDoctor}\r\n//                       onChange={handleChange}\r\n//                     >\r\n//                       <option value=\"\">Select a Doctor</option>\r\n//                       {doctors.map((doctor, index) => (\r\n//                         <option key={index} value={doctor.name}>\r\n//                           {doctor.name}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                     <label htmlFor=\"floatingDoctor\">Choose a Doctor</label>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"col-md-4\">\r\n//                   <div className=\"form-floating\">\r\n//                     <input\r\n//                       type=\"date\"\r\n//                       className=\"form-control\"\r\n//                       id=\"floatingDate\"\r\n//                       value={appointmentDate}\r\n//                       onChange={(e) => setAppointmentDate(e.target.value)}\r\n//                     />\r\n//                     <label htmlFor=\"floatingDate\">Select Date</label>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"col-md-4\">\r\n//                   <div className=\"form-floating\">\r\n//                     <input\r\n//                       type=\"time\"\r\n//                       className=\"form-control\"\r\n//                       id=\"floatingTime\"\r\n//                       value={appointmentTime}\r\n//                       onChange={(e) => setAppointmentTime(e.target.value)}\r\n//                       disabled={!selectedDoctor}\r\n//                     />\r\n//                     <label htmlFor=\"floatingTime\">Select Time</label>\r\n//                   </div>\r\n//                   {selectedDoctor && getUnavailableTimes().includes(appointmentTime) && (\r\n//                     <p className=\"text-danger mt-2\"> This time slot is unavailable!</p>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"col-md-12 d-flex justify-content-end\">\r\n//                   <button\r\n//                     className=\"btn btn-success appointment-btn\"\r\n//                     onClick={handleBookAppointment}\r\n//                     disabled={\r\n//                       !selectedDoctor ||\r\n//                       !appointmentDate ||\r\n//                       !appointmentTime ||\r\n//                       getUnavailableTimes().includes(appointmentTime)\r\n//                     }\r\n//                   >\r\n//                     Book Appointment\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"mt-5\">\r\n//               <h4>My Appointments</h4>\r\n//               <hr className=\"border border-3 border-success\" />\r\n//               {appointments.length === 0 ? (\r\n//                 <p className=\"text-muted\">No active appointments.</p>\r\n//               ) : (\r\n//                 <ul className=\"list-group\">\r\n//                   {appointments.map((appointment, index) => (\r\n//                     <li key={index} className=\"list-group-item d-flex justify-content-between\">\r\n//                       <span>\r\n//                         {appointment.date} -  {appointment.time} - {appointment.doctor}\r\n//                       </span>\r\n//                       <button\r\n//                         className=\"btn btn-danger btn-sm\"\r\n//                         onClick={() => handleCancelAppointment(index)}\r\n//                       >\r\n//                         Cancel\r\n//                       </button>\r\n//                     </li>\r\n//                   ))}\r\n//                 </ul>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         </section>\r\n//       <Footer/>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Header from \"../components/Header\";\r\n// import Footer from \"../components/Footer\";\r\n// import { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\n\r\n// const Dashboard = ({ userName = \"Kumaran\" }) => {\r\n//   const [sugarData, setSugarData] = useState([]);\r\n//   const [beforeEating, setBeforeEating] = useState(\"\");\r\n//   const [afterEating, setAfterEating] = useState(\"\");\r\n//   const [selectedRange, setSelectedRange] = useState(\"week\");\r\n\r\n//   const getCurrentTime = () => {\r\n//     const now = new Date();\r\n//     return now.getHours() * 60 + now.getMinutes(); // Time in minutes\r\n//   };\r\n\r\n//   const isWithinTimeRange = () => {\r\n//     const timeNow = getCurrentTime();\r\n//     return timeNow >= 360 && timeNow <= 480; // 6:00 AM (360 mins) to 8:00 AM (480 mins)\r\n//   };\r\n\r\n//   const handleAddSugarData = () => {\r\n//     if (beforeEating && afterEating) {\r\n//       setSugarData([...sugarData, { time: new Date().toLocaleDateString(), beforeEating, afterEating }]);\r\n//       setBeforeEating(\"\");\r\n//       setAfterEating(\"\");\r\n//     }\r\n//   };\r\n\r\n//   // Generate placeholders for missing data (empty values for days not recorded)\r\n//   const generateChartData = () => {\r\n//     let dates = [];\r\n//     let today = new Date();\r\n//     for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\r\n//       let date = new Date(today);\r\n//       date.setDate(today.getDate() - i);\r\n//       dates.push(date.toLocaleDateString());\r\n//     }\r\n\r\n//     return dates\r\n//       .map((date) => {\r\n//         let entry = sugarData.find((data) => data.time === date);\r\n//         return entry\r\n//           ? entry\r\n//           : { time: date, beforeEating: null, afterEating: null }; // Leave gaps for missing data\r\n//       })\r\n//       .reverse();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"dashboard\">\r\n//       <Header />\r\n//       <section className=\"dashboardsection\">\r\n//         <div className=\"container mt-4\">\r\n//           <h2 className=\"text-start\">Dashboard</h2>\r\n//           <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\r\n\r\n//           {/* Sugar Level Form */}\r\n//           <div className=\"mt-4\">\r\n//             <h4>Track Your Sugar Levels</h4>\r\n//             <hr className=\"border border-3 border-success\" />\r\n//             <div className=\"row g-3\">\r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     className=\"form-control\"\r\n//                     id=\"beforeEating\"\r\n//                     placeholder=\"Before Eating\"\r\n//                     value={beforeEating}\r\n//                     onChange={(e) => setBeforeEating(e.target.value)}\r\n//                     disabled={!isWithinTimeRange()}\r\n//                   />\r\n//                   <label htmlFor=\"beforeEating\">Sugar Level (Before Eating)</label>\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     className=\"form-control\"\r\n//                     id=\"afterEating\"\r\n//                     placeholder=\"After Eating\"\r\n//                     value={afterEating}\r\n//                     onChange={(e) => setAfterEating(e.target.value)}\r\n//                     disabled={!isWithinTimeRange()}\r\n//                   />\r\n//                   <label htmlFor=\"afterEating\">Sugar Level (After Eating)</label>\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"col-md-4 d-flex align-items-center\">\r\n//                 <button\r\n//                   className=\"btn btn-success w-100\"\r\n//                   onClick={handleAddSugarData}\r\n//                   disabled={!isWithinTimeRange() || !beforeEating || !afterEating}\r\n//                 >\r\n//                   Add Data\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//             {!isWithinTimeRange() && <p className=\"text-danger mt-2\">Data can only be entered between 6 AM - 8 AM</p>}\r\n//           </div>\r\n\r\n//           {/* Toggle Graph Range */}\r\n//           <div className=\"mt-4\">\r\n//             <h4>Sugar Level Graph</h4>\r\n//             <hr className=\"border border-3 border-success\" />\r\n//             <div className=\"d-flex\">\r\n//               <button\r\n//                 className={`btn ${selectedRange === \"week\" ? \"btn-primary\" : \"btn-outline-primary\"} me-2`}\r\n//                 onClick={() => setSelectedRange(\"week\")}\r\n//               >\r\n//                 Weekly View\r\n//               </button>\r\n//               <button\r\n//                 className={`btn ${selectedRange === \"month\" ? \"btn-primary\" : \"btn-outline-primary\"}`}\r\n//                 onClick={() => setSelectedRange(\"month\")}\r\n//               >\r\n//                 Monthly View\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Sugar Level Graph */}\r\n//           <div className=\"mt-4\">\r\n//             <ResponsiveContainer width=\"100%\" height={300}>\r\n//               <LineChart data={generateChartData()}>\r\n//                 <XAxis dataKey=\"time\" />\r\n//                 <YAxis />\r\n//                 <Tooltip />\r\n//                 <Legend />\r\n//                 <Line type=\"monotone\" dataKey=\"beforeEating\" stroke=\"#8884d8\" strokeWidth={3} dot={{ r: 5 }} />\r\n//                 <Line type=\"monotone\" dataKey=\"afterEating\" stroke=\"#82ca9d\" strokeWidth={3} dot={{ r: 5 }} />\r\n//               </LineChart>\r\n//             </ResponsiveContainer>\r\n//           </div>\r\n//         </div>\r\n//       </section>\r\n//       <Footer />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\nimport React, { useState } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\n\r\nconst Dashboard = ({ userName = \"Kumaran\" }) => {\r\n  const [sugarData, setSugarData] = useState([]);\r\n  const [beforeEating, setBeforeEating] = useState(\"\");\r\n  const [afterEating, setAfterEating] = useState(\"\");\r\n  const [selectedRange, setSelectedRange] = useState(\"week\");\r\n\r\n  const handleAddSugarData = () => {\r\n    if (beforeEating && afterEating) {\r\n      setSugarData([...sugarData, { time: new Date().toLocaleDateString(), beforeEating, afterEating }]);\r\n      setBeforeEating(\"\");\r\n      setAfterEating(\"\");\r\n    }\r\n  };\r\n\r\n  // Generate placeholders for missing data (empty values for days not recorded)\r\n  const generateChartData = () => {\r\n    let dates = [];\r\n    let today = new Date();\r\n    for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\r\n      let date = new Date(today);\r\n      date.setDate(today.getDate() - i);\r\n      dates.push(date.toLocaleDateString());\r\n    }\r\n\r\n    return dates\r\n      .map((date) => {\r\n        let entry = sugarData.find((data) => data.time === date);\r\n        return entry\r\n          ? entry\r\n          : { time: date, beforeEating: null, afterEating: null }; // Leaves gaps in graph\r\n      })\r\n      .reverse();\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Header />\r\n      <section className=\"dashboardsection\">\r\n        <div className=\"container mt-4\">\r\n          <h2 className=\"text-start\">Dashboard</h2>\r\n          <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\r\n\r\n          {/* Sugar Level Form */}\r\n          <div className=\"mt-4\">\r\n            <h4>Track Your Sugar Levels</h4>\r\n            <hr className=\"border border-3 border-success\" />\r\n            <div className=\"row g-3\">\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    id=\"beforeEating\"\r\n                    placeholder=\"Before Eating\"\r\n                    value={beforeEating}\r\n                    onChange={(e) => setBeforeEating(e.target.value)}\r\n                  />\r\n                  <label htmlFor=\"beforeEating\">Sugar Level (Before Eating)</label>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    id=\"afterEating\"\r\n                    placeholder=\"After Eating\"\r\n                    value={afterEating}\r\n                    onChange={(e) => setAfterEating(e.target.value)}\r\n                  />\r\n                  <label htmlFor=\"afterEating\">Sugar Level (After Eating)</label>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4 d-flex align-items-center\">\r\n                <button\r\n                  className=\"btn btn-success w-100\"\r\n                  onClick={handleAddSugarData}\r\n                  disabled={!beforeEating || !afterEating}\r\n                >\r\n                  Add Data\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Toggle Graph Range */}\r\n          <div className=\"mt-4\">\r\n            <h4>Sugar Level Graph</h4>\r\n            <hr className=\"border border-3 border-success\" />\r\n            <div className=\"d-flex\">\r\n              <button\r\n                className={`btn ${selectedRange === \"week\" ? \"btn-primary\" : \"btn-outline-primary\"} me-2`}\r\n                onClick={() => setSelectedRange(\"week\")}\r\n              >\r\n                Weekly View\r\n              </button>\r\n              <button\r\n                className={`btn ${selectedRange === \"month\" ? \"btn-primary\" : \"btn-outline-primary\"}`}\r\n                onClick={() => setSelectedRange(\"month\")}\r\n              >\r\n                Monthly View\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Sugar Level Graph */}\r\n          <div className=\"mt-4\">\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <LineChart data={generateChartData()}>\r\n                <XAxis dataKey=\"time\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"beforeEating\" stroke=\"#8884d8\" strokeWidth={3} dot={{ r: 5 }} />\r\n                <Line type=\"monotone\" dataKey=\"afterEating\" stroke=\"#82ca9d\" strokeWidth={3} dot={{ r: 5 }} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/F,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ,GAAG;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,MAAM,CAAC;EAE1D,MAAMuB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIN,YAAY,IAAIE,WAAW,EAAE;MAC/BH,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAE;QAAES,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAAET,YAAY;QAAEE;MAAY,CAAC,CAAC,CAAC;MAClGD,eAAe,CAAC,EAAE,CAAC;MACnBE,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIC,KAAK,GAAG,EAAE;IACd,IAAIC,KAAK,GAAG,IAAIJ,IAAI,CAAC,CAAC;IACtB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIT,aAAa,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC,EAAES,CAAC,EAAE,EAAE;MAC5D,IAAIC,IAAI,GAAG,IAAIN,IAAI,CAACI,KAAK,CAAC;MAC1BE,IAAI,CAACC,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGH,CAAC,CAAC;MACjCF,KAAK,CAACM,IAAI,CAACH,IAAI,CAACL,kBAAkB,CAAC,CAAC,CAAC;IACvC;IAEA,OAAOE,KAAK,CACTO,GAAG,CAAEJ,IAAI,IAAK;MACb,IAAIK,KAAK,GAAGrB,SAAS,CAACsB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACd,IAAI,KAAKO,IAAI,CAAC;MACxD,OAAOK,KAAK,GACRA,KAAK,GACL;QAAEZ,IAAI,EAAEO,IAAI;QAAEd,YAAY,EAAE,IAAI;QAAEE,WAAW,EAAE;MAAK,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CACDoB,OAAO,CAAC,CAAC;EACd,CAAC;EAED,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB9B,OAAA,CAACV,MAAM;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVlC,OAAA;MAAS6B,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eACnC9B,OAAA;QAAK6B,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B9B,OAAA;UAAI6B,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzClC,OAAA;UAAI6B,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAAC,WAAS,EAAC5B,QAAQ,EAAC,GAAC;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAGzDlC,OAAA;UAAK6B,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnB9B,OAAA;YAAA8B,QAAA,EAAI;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChClC,OAAA;YAAI6B,SAAS,EAAC;UAAgC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjDlC,OAAA;YAAK6B,SAAS,EAAC,SAAS;YAAAC,QAAA,gBACtB9B,OAAA;cAAK6B,SAAS,EAAC,UAAU;cAAAC,QAAA,eACvB9B,OAAA;gBAAK6B,SAAS,EAAC,eAAe;gBAAAC,QAAA,gBAC5B9B,OAAA;kBACEmC,IAAI,EAAC,QAAQ;kBACbN,SAAS,EAAC,cAAc;kBACxBO,EAAE,EAAC,cAAc;kBACjBC,WAAW,EAAC,eAAe;kBAC3BC,KAAK,EAAEhC,YAAa;kBACpBiC,QAAQ,EAAGC,CAAC,IAAKjC,eAAe,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK;gBAAE;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAClD,CAAC,eACFlC,OAAA;kBAAO0C,OAAO,EAAC,cAAc;kBAAAZ,QAAA,EAAC;gBAA2B;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9D;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNlC,OAAA;cAAK6B,SAAS,EAAC,UAAU;cAAAC,QAAA,eACvB9B,OAAA;gBAAK6B,SAAS,EAAC,eAAe;gBAAAC,QAAA,gBAC5B9B,OAAA;kBACEmC,IAAI,EAAC,QAAQ;kBACbN,SAAS,EAAC,cAAc;kBACxBO,EAAE,EAAC,aAAa;kBAChBC,WAAW,EAAC,cAAc;kBAC1BC,KAAK,EAAE9B,WAAY;kBACnB+B,QAAQ,EAAGC,CAAC,IAAK/B,cAAc,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK;gBAAE;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjD,CAAC,eACFlC,OAAA;kBAAO0C,OAAO,EAAC,aAAa;kBAAAZ,QAAA,EAAC;gBAA0B;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5D;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNlC,OAAA;cAAK6B,SAAS,EAAC,oCAAoC;cAAAC,QAAA,eACjD9B,OAAA;gBACE6B,SAAS,EAAC,uBAAuB;gBACjCc,OAAO,EAAE/B,kBAAmB;gBAC5BgC,QAAQ,EAAE,CAACtC,YAAY,IAAI,CAACE,WAAY;gBAAAsB,QAAA,EACzC;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGNlC,OAAA;UAAK6B,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnB9B,OAAA;YAAA8B,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BlC,OAAA;YAAI6B,SAAS,EAAC;UAAgC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjDlC,OAAA;YAAK6B,SAAS,EAAC,QAAQ;YAAAC,QAAA,gBACrB9B,OAAA;cACE6B,SAAS,EAAE,OAAOnB,aAAa,KAAK,MAAM,GAAG,aAAa,GAAG,qBAAqB,OAAQ;cAC1FiC,OAAO,EAAEA,CAAA,KAAMhC,gBAAgB,CAAC,MAAM,CAAE;cAAAmB,QAAA,EACzC;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTlC,OAAA;cACE6B,SAAS,EAAE,OAAOnB,aAAa,KAAK,OAAO,GAAG,aAAa,GAAG,qBAAqB,EAAG;cACtFiC,OAAO,EAAEA,CAAA,KAAMhC,gBAAgB,CAAC,OAAO,CAAE;cAAAmB,QAAA,EAC1C;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGNlC,OAAA;UAAK6B,SAAS,EAAC,MAAM;UAAAC,QAAA,eACnB9B,OAAA,CAACF,mBAAmB;YAAC+C,KAAK,EAAC,MAAM;YAACC,MAAM,EAAE,GAAI;YAAAhB,QAAA,eAC5C9B,OAAA,CAACR,SAAS;cAACmC,IAAI,EAAEX,iBAAiB,CAAC,CAAE;cAAAc,QAAA,gBACnC9B,OAAA,CAACN,KAAK;gBAACqD,OAAO,EAAC;cAAM;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eACxBlC,OAAA,CAACL,KAAK;gBAAAoC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eACTlC,OAAA,CAACJ,OAAO;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eACXlC,OAAA,CAACH,MAAM;gBAAAkC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eACVlC,OAAA,CAACP,IAAI;gBAAC0C,IAAI,EAAC,UAAU;gBAACY,OAAO,EAAC,cAAc;gBAACC,MAAM,EAAC,SAAS;gBAACC,WAAW,EAAE,CAAE;gBAACC,GAAG,EAAE;kBAAEC,CAAC,EAAE;gBAAE;cAAE;gBAAApB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAC/FlC,OAAA,CAACP,IAAI;gBAAC0C,IAAI,EAAC,UAAU;gBAACY,OAAO,EAAC,aAAa;gBAACC,MAAM,EAAC,SAAS;gBAACC,WAAW,EAAE,CAAE;gBAACC,GAAG,EAAE;kBAAEC,CAAC,EAAE;gBAAE;cAAE;gBAAApB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACVlC,OAAA,CAACT,MAAM;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA3HIF,SAAS;AAAAmD,EAAA,GAATnD,SAAS;AA6Hf,eAAeA,SAAS;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}