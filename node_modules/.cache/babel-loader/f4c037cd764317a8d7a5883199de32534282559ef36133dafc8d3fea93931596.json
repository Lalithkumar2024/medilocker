{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kumaran project\\\\medilocker\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState , useEffect } from \"react\";\n// import Header from \"../components/Header\";\n// import Footer from \"../components/Footer\";\n// import { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n// import Swal from \"sweetalert2\";\n// import { addAppointment, getAllAppointments, deleteAppointment } from \"../api/AppointmentService\";\n// import { addData, getALLGraphData } from \"../api/GraphService\";\n// import { getPatientId } from \"../api/PatientService\";\n// import { getAllDoctors } from \"../api/DoctorService\";\n// import { getAllScheduleTimes } from \"../api/ScheduleService\";\n\n// const Dashboard = () => {\n//   const [sugarData, setSugarData] = useState([]);\n//   const [beforeEating, setBeforeEating] = useState(\"\");\n//   const [afterEating, setAfterEating] = useState(\"\");\n//   const [selectedRange, setSelectedRange] = useState(\"week\");\n\n//   const [doctors, setDoctors] = useState([]);\n//   const [selectedDoctor, setSelectedDoctor] = useState(\"\");\n\n//   const [appointmentDate, setAppointmentDate] = useState(\"\");\n//   const [appointmentTime, setAppointmentTime] = useState(\"\");\n//   const [appointments, setAppointments] = useState([]);\n\n//   const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n\n//   const user = JSON.parse(localStorage.getItem(\"users\"));\n//   const userId = user.user_id;\n//   const userName = user.name;\n//   // console.log(\"Logged-in user:\", user);\n\n//   const handleChange = (e) => {\n//     setSelectedDoctor(e.target.value);\n//   };\n\n//   const handleBookAppointment = async() => {\n//     if (selectedDoctor && appointmentDate && appointmentTime) {\n//       const newAppointment = {\n//         doctorName: selectedDoctor,\n//         appointmentDate: appointmentDate,\n//         appointmentTime: appointmentTime,\n//       };\n\n//       const patient = await getPatientId(userId);\n//       const patientId = patient.data;\n//       // console.log(\"PatientId :\",patientId);\n\n//       try {\n//         await addAppointment(patientId, newAppointment); \n//         setAppointments([...appointments, newAppointment]);\n//         setSelectedDoctor(\"\");\n//         setAppointmentDate(\"\");\n//         setAppointmentTime(\"\");\n//         Swal.fire(\"Appointment Booked!\", `Appointment for ${selectedDoctor} on ${appointmentDate} at ${appointmentTime} Booked Successfully!`, \"success\");\n//       } catch (error) {\n//         Swal.fire(\"Error\", \"Failed to book appointment.\", \"error\");\n//       }\n//     }\n//   };\n\n//   const handleCancelAppointment = async (index) => {\n//     const appointmentToCancel = appointments[index];\n\n//     Swal.fire({\n//       title: \"Are you sure?\",\n//       text: \"Do you want to cancel this appointment?\",\n//       icon: \"warning\",\n//       showCancelButton: true,\n//       confirmButtonColor: '#dc3545',\n//       cancelButtonColor: '#6c757d',\n//       confirmButtonText: 'Yes, cancel it!',\n//     }).then(async (result) => {\n//       if (result.isConfirmed) {\n//         try {\n//           const id = appointmentToCancel.appointment_id;\n//           // console.log(\"appointment_id:\",id);\n//           await deleteAppointment(id); \n//           const updatedAppointments = appointments.filter((_, i) => i !== index);\n//           setAppointments(updatedAppointments);\n//           Swal.fire(\"Cancelled!\", \"The appointment has been cancelled.\", \"success\");\n//         } catch (error) {\n//           Swal.fire(\"Error\", \"Failed to cancel appointment in backend.\", \"error\");\n//         }\n//       }\n//     });\n//   };\n\n//   const scheduleTime = async (selectedDoctorName) => {\n//     try {\n//       const response = await getAllScheduleTimes();\n//       const allSchedules = response.data;\n//       const doctorAvailableTimes = allSchedules.filter(\n//         (schedule) => schedule.doctorName === selectedDoctorName\n//       );\n//       const availableSlots = doctorAvailableTimes.map((schedule) => ({\n//         date: schedule.scheduleDate,\n//         from: schedule.fromTime,\n//         to: schedule.toTime,\n//       }));\n\n//       return availableSlots;\n//     } catch (error) {\n//       console.error(\"Failed to fetch schedule times:\", error);\n//       return [];\n//     }\n//   };\n\n//   const handleAddSugarData = async() => {\n//     const now = new Date();\n//     const hours = now.getHours();\n\n//     const patient = await getPatientId(userId);\n//     const patientId = patient.data;\n//     // console.log(\"PatientId :\",patientId);\n\n//     if (hours < 6 || hours >= 8) {\n//       Swal.fire(\"Error\", \"Sugar level data can only be uploaded between 6 AM and 8 AM.\", \"error\");\n//       return;\n//     }\n\n//     if (beforeEating && afterEating) {\n//       const newData = {\n//         beforeEating: parseInt(beforeEating),\n//         afterEating: parseInt(afterEating)\n//       };\n//       try {\n//         await addData(patientId, newData);\n//         setSugarData([...sugarData, newData]);\n//         setBeforeEating(\"\");\n//         setAfterEating(\"\");\n//         await fetchGraphData();\n//         Swal.fire(\"Valued Added!\", \"Sugar level Data Updated.\", \"success\");\n//       } catch (error) {\n//         Swal.fire(\"Error\", \"Failed to upload data.\", \"error\");\n//       }\n//     }\n//   };\n\n//   const generateChartData = () => {\n//     let dates = [];\n//     let today = new Date();\n\n//     for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\n//       let date = new Date(today);\n//       date.setDate(today.getDate() - i);\n//       dates.push(date.toISOString().split(\"T\")[0]);\n//     }\n\n//     return dates\n//       .map((date) => {\n//         let entry = sugarData.find((data) => data.date === date); \n//         return entry\n//           ? { ...entry, time: date }\n//           : { time: date, beforeEating: null, afterEating: null };\n//       })\n//       .reverse();\n//   };\n\n//   useEffect(() => {  \n\n//     const fetchGraphData = async () => {\n//       try{\n//       const patient = await getPatientId(userId);\n//       const patientId = patient.data;\n\n//       const res = await getALLGraphData(); \n//       const filteredData = res.data.filter(item => item.patient.patient_id === patientId);\n\n//       const simplified = filteredData.map(item => ({\n//         date: item.dataDate,\n//         beforeEating: item.beforeEating,\n//         afterEating: item.afterEating,\n//       }));\n\n//       setSugarData(simplified);\n//       // console.log(\"sugar data:\",simplified);\n//       }catch(error){\n//         console.log(\"error fetching sugar data\",error);\n//       }\n//     };\n\n//     const fetchAppointments = async () => {\n//       try{\n//         const patient = await getPatientId(userId);\n//         const patientId = patient.data;\n\n//         const response = await getAllAppointments();\n//         const filtered = response.data.filter(item => item.patient.patient_id === patientId);\n\n//         setAppointments(filtered);\n//         // console.log(\"Appointments :\" , filtered);\n//       }catch(error){\n//         console.log(\"Error fetching appointments\",error);\n//       }\n//     };\n\n//     const fetchDoctors = async () => {\n//       try {\n//         const res = await getAllDoctors();\n//         setDoctors(res.data);\n//         // console.log(\"doctors :\",res.data); \n//       } catch (error) {\n//         console.error(\"Failed to fetch doctors\", error);\n//       }\n//     };\n\n//     const loadScheduleTimes = async () => {\n//       if (selectedDoctor) {\n//         const slots = await scheduleTime(selectedDoctor);\n//         setAvailableTimeSlots(slots);\n//       } else {\n//         setAvailableTimeSlots([]);\n//       }\n//     };\n\n//     const isTimeAvailable = () => {\n//       if (!appointmentTime || !appointmentDate || availableTimeSlots.length === 0) return false;\n\n//       return availableTimeSlots.some(slot => {\n//         return slot.date === appointmentDate && appointmentTime >= slot.from && appointmentTime <= slot.to;\n//       });\n//     };\n\n//     fetchGraphData();\n//     fetchDoctors();\n//     fetchAppointments();\n//     loadScheduleTimes();\n//     if (selectedDoctor && appointmentTime && appointmentDate && !isTimeAvailable()) {\n//       Swal.fire(\"Unavailable Time Slot\",\"The selected time is not available for this doctor. Please choose a different time.\",\"error\");\n//     }\n//   }, [appointmentDate,appointmentTime,selectedDoctor,availableTimeSlots,userId]);\n\n//   return (\n//     <div className=\"dashboard\">\n//       <Header />\n//       <section className=\"dashboardsection\">\n//         <div className=\"container mt-4\">\n//           <h2 className=\"text-start\">Dashboard</h2>\n//           <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\n\n//           {/* patient sugar detail graph */}\n//           <div className=\"mt-5\">\n//             <h4>Track Your Sugar Levels</h4>\n//             <hr className=\"border border-3 border-success\" />\n//             <div className=\"row g-3\">\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <input\n//                     type=\"number\"\n//                     className=\"form-control\"\n//                     id=\"beforeEating\"\n//                     name=\"beforeEating\"\n//                     autoComplete=\"off\"\n//                     required\n//                     placeholder=\"Before Eating\"\n//                     value={beforeEating}\n//                     onChange={(e) => setBeforeEating(e.target.value)}/>\n//                   <label htmlFor=\"beforeEating\">Sugar Level (Before Eating)</label>\n//                 </div>\n//               </div>\n\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <input\n//                     type=\"number\"\n//                     className=\"form-control\"\n//                     id=\"afterEating\"\n//                     name=\"afterEating\"\n//                     autoComplete=\"off\"\n//                     required\n//                     placeholder=\"After Eating\"\n//                     value={afterEating}\n//                     onChange={(e) => setAfterEating(e.target.value)}/>\n//                   <label htmlFor=\"afterEating\">Sugar Level (After Eating)</label>\n//                 </div>\n//               </div>\n\n//               <div className=\"col-md-4 d-flex align-items-center\">\n//                 <button\n//                   className=\"btn button btn-success w-100\"\n//                   onClick={handleAddSugarData}\n//                   disabled={!beforeEating || !afterEating}>\n//                   Add Data\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n\n//           {/* graph */}\n//           <div className=\"mt-5\">\n//             <h4>Sugar Level Graph</h4>\n//             <hr className=\"border border-3 border-success\" />\n//             <div className=\"d-flex\">\n//               <button\n//                 className={`btn button ${selectedRange === \"week\" ? \"btn-success\" : \"btn-outline-success\"} me-2`}\n//                 onClick={() => setSelectedRange(\"week\")}>\n//                 Weekly View\n//               </button>\n//               <button\n//                 className={`btn button ${selectedRange === \"month\" ? \"btn-success\" : \"btn-outline-success\"}`}\n//                 onClick={() => setSelectedRange(\"month\")}>\n//                 Monthly View\n//               </button>\n//             </div>\n//           </div>\n\n//           <div className=\"mt-5\">\n//             <ResponsiveContainer width=\"100%\" height={300}>\n//              <LineChart data={generateChartData()}>\n//                  <XAxis dataKey=\"time\" />\n//                 <YAxis />\n//                 <Tooltip />\n//                 <Legend />               \n//                 <Line type=\"monotone\" dataKey=\"beforeEating\" stroke=\"#8884d8\" strokeWidth={3} dot={{ r: 5 }} />\n//                 <Line type=\"monotone\" dataKey=\"afterEating\" stroke=\"#82ca9d\" strokeWidth={3} dot={{ r: 5 }} />\n//               </LineChart>  \n//             </ResponsiveContainer>\n//           </div>\n//         </div>\n\n//         {/* book appointment */}\n//         <div className=\"mt-5\">\n//           <h4>Book an Appointment</h4>\n//           <hr className=\"border border-3 border-success\" />\n//             <div className=\"row g-3 mt-2\">\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <select className=\"form-control\"\n//                     id=\"floatingDoctor\"\n//                     value={selectedDoctor}\n//                     onChange={handleChange}>\n//                     <option value=\"\">Select a Doctor</option>\n//                     {doctors.map((doctor, index) => (\n//                       <option key={index} value={doctor.doctorName}>\n//                         {doctor.doctorName} - {doctor.specialization}\n//                       </option>\n//                     ))}\n//                   </select>\n//                   <label htmlFor=\"floatingDoctor\">Choose a Doctor</label>\n//                 </div>\n//               </div>\n\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <input type=\"date\"\n//                     className=\"form-control\"\n//                     id=\"floatingDate\"\n//                     value={appointmentDate}\n//                     onChange={(e) => setAppointmentDate(e.target.value)}/>\n//                   <label htmlFor=\"floatingDate\">Select Date</label>\n//                 </div>\n//               </div>\n\n//               <div className=\"col-md-4\">\n//                 <div className=\"form-floating\">\n//                   <input type=\"time\"\n//                     className=\"form-control\"\n//                     id=\"floatingTime\"\n//                     value={appointmentTime}\n//                     onChange={(e) => setAppointmentTime(e.target.value)}\n//                     disabled={!selectedDoctor}/>\n//                   <label htmlFor=\"floatingTime\">Select Time</label>\n//                 </div>\n//               </div>\n\n//               <div className=\"col-md-12 d-flex justify-content-end\">\n//                 <button className=\"btn btn-success appointment-btn\"\n//                   onClick={handleBookAppointment}\n//                   disabled={\n//                     !selectedDoctor ||\n//                     !appointmentDate ||\n//                     !appointmentTime ||\n//                     !isTimeAvailable()\n//                   }>\n//                     Book Appointment\n//                 </button>\n//               </div>\n\n//             </div>\n//         </div>\n\n//             {/* my appointments */}\n//           <div className=\"mt-5\">\n//             <h4>My Appointments</h4>\n//             <hr className=\"border border-3 border-success\" />\n//               {appointments.length === 0 ? (\n//                 <p className=\"text-muted\">No active appointments.</p>\n//               ) : (\n//               <ul className=\"list-group\">\n//                 {appointments.map((appointment, index) => (\n//                   <li key={index} className=\"list-group-item d-flex justify-content-between\">\n//                   <span>\n//                     {appointment.appointmentDate} -  {appointment.appointmentTime} - {appointment.doctorName}\n//                   </span>\n//                   <button className=\"btn btn-danger btn-sm\"\n//                     onClick={() => handleCancelAppointment(index)}>\n//                     Cancel\n//                   </button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             )}\n//           </div>\n\n//       </section>\n//       <Footer />\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport Swal from \"sweetalert2\";\nimport { addAppointment, getAllAppointments, deleteAppointment } from \"../api/AppointmentService\";\nimport { addData, getALLGraphData } from \"../api/GraphService\";\nimport { getPatientId } from \"../api/PatientService\";\nimport { getAllDoctors } from \"../api/DoctorService\";\nimport { getAllScheduleTimes } from \"../api/ScheduleService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [sugarData, setSugarData] = useState([]);\n  const [beforeEating, setBeforeEating] = useState(\"\");\n  const [afterEating, setAfterEating] = useState(\"\");\n  const [selectedRange, setSelectedRange] = useState(\"week\");\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(\"\");\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [appointmentTime, setAppointmentTime] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const user = JSON.parse(localStorage.getItem(\"users\"));\n  const userId = user.user_id;\n  const userName = user.name;\n  // console.log(\"Logged-in user:\", user);\n\n  const handleChange = e => {\n    setSelectedDoctor(e.target.value);\n  };\n  const fetchGraphData = useCallback(async () => {\n    try {\n      const patient = await getPatientId(userId);\n      const patientId = patient.data;\n      const res = await getALLGraphData();\n      const filteredData = res.data.filter(item => item.patient.patient_id === patientId);\n      const simplified = filteredData.map(item => ({\n        date: item.dataDate,\n        beforeEating: item.beforeEating,\n        afterEating: item.afterEating\n      }));\n      setSugarData(simplified);\n    } catch (error) {\n      console.log(\"error fetching sugar data\", error);\n    }\n  }, [userId]);\n  const isTimeAvailable = useCallback(() => {\n    if (!appointmentTime || !appointmentDate || availableTimeSlots.length === 0) return false;\n    return availableTimeSlots.some(slot => {\n      return slot.date === appointmentDate && appointmentTime >= slot.from && appointmentTime <= slot.to;\n    });\n  }, [appointmentTime, appointmentDate, availableTimeSlots]);\n  const handleBookAppointment = async () => {\n    if (selectedDoctor && appointmentDate && appointmentTime) {\n      const newAppointment = {\n        doctorName: selectedDoctor,\n        appointmentDate: appointmentDate,\n        appointmentTime: appointmentTime\n      };\n      const patient = await getPatientId(userId);\n      const patientId = patient.data;\n      // console.log(\"PatientId :\", patientId);\n\n      try {\n        await addAppointment(patientId, newAppointment);\n        setAppointments([...appointments, newAppointment]);\n        setSelectedDoctor(\"\");\n        setAppointmentDate(\"\");\n        setAppointmentTime(\"\");\n        Swal.fire(\"Appointment Booked!\", `Appointment for ${selectedDoctor} on ${appointmentDate} at ${appointmentTime} Booked Successfully!`, \"success\");\n      } catch (error) {\n        Swal.fire(\"Error\", \"Failed to book appointment.\", \"error\");\n      }\n    }\n  };\n  const handleCancelAppointment = async index => {\n    const appointmentToCancel = appointments[index];\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"Do you want to cancel this appointment?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: '#dc3545',\n      cancelButtonColor: '#6c757d',\n      confirmButtonText: 'Yes, cancel it!'\n    }).then(async result => {\n      if (result.isConfirmed) {\n        try {\n          const id = appointmentToCancel.appointment_id;\n          // console.log(\"appointment_id:\", id);\n          await deleteAppointment(id);\n          const updatedAppointments = appointments.filter((_, i) => i !== index);\n          setAppointments(updatedAppointments);\n          Swal.fire(\"Cancelled!\", \"The appointment has been cancelled.\", \"success\");\n        } catch (error) {\n          Swal.fire(\"Error\", \"Failed to cancel appointment in backend.\", \"error\");\n        }\n      }\n    });\n  };\n  const scheduleTime = async selectedDoctorName => {\n    try {\n      const response = await getAllScheduleTimes();\n      const allSchedules = response.data;\n      const doctorAvailableTimes = allSchedules.filter(schedule => schedule.doctorName === selectedDoctorName);\n      const availableSlots = doctorAvailableTimes.map(schedule => ({\n        date: schedule.scheduleDate,\n        from: schedule.fromTime,\n        to: schedule.toTime\n      }));\n      return availableSlots;\n    } catch (error) {\n      console.error(\"Failed to fetch schedule times:\", error);\n      return [];\n    }\n  };\n  const handleAddSugarData = async () => {\n    const now = new Date();\n    const hours = now.getHours();\n    const patient = await getPatientId(userId);\n    const patientId = patient.data;\n    // console.log(\"PatientId :\", patientId);\n\n    if (hours < 6 || hours >= 8) {\n      Swal.fire(\"Error\", \"Sugar level data can only be uploaded between 6 AM and 8 AM.\", \"error\");\n      return;\n    }\n    if (beforeEating && afterEating) {\n      const newData = {\n        beforeEating: parseInt(beforeEating),\n        afterEating: parseInt(afterEating)\n      };\n      try {\n        await addData(patientId, newData);\n        setSugarData([...sugarData, newData]);\n        setBeforeEating(\"\");\n        setAfterEating(\"\");\n        await fetchGraphData();\n        Swal.fire(\"Valued Added!\", \"Sugar level Data Updated.\", \"success\");\n      } catch (error) {\n        Swal.fire(\"Error\", \"Failed to upload data.\", \"error\");\n      }\n    }\n  };\n  const generateChartData = () => {\n    let dates = [];\n    let today = new Date();\n    for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\n      let date = new Date(today);\n      date.setDate(today.getDate() - i);\n      dates.push(date.toISOString().split(\"T\")[0]);\n    }\n    return dates.map(date => {\n      let entry = sugarData.find(data => data.date === date);\n      return entry ? {\n        ...entry,\n        time: date\n      } : {\n        time: date,\n        beforeEating: null,\n        afterEating: null\n      };\n    }).reverse();\n  };\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        const patient = await getPatientId(userId);\n        const patientId = patient.data;\n        const response = await getAllAppointments();\n        const filtered = response.data.filter(item => item.patient.patient_id === patientId);\n        setAppointments(filtered);\n        // console.log(\"Appointments :\", filtered);\n      } catch (error) {\n        console.log(\"Error fetching appointments\", error);\n      }\n    };\n    fetchAppointments();\n  }, [userId]);\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const res = await getAllDoctors();\n        setDoctors(res.data);\n        // console.log(\"doctors :\", res.data); \n      } catch (error) {\n        console.error(\"Failed to fetch doctors\", error);\n      }\n    };\n    fetchDoctors();\n  }, []);\n  useEffect(() => {\n    const loadScheduleTimes = async () => {\n      if (selectedDoctor) {\n        const slots = await scheduleTime(selectedDoctor);\n        setAvailableTimeSlots(slots);\n      } else {\n        setAvailableTimeSlots([]);\n      }\n    };\n    loadScheduleTimes();\n  }, [selectedDoctor]);\n  useEffect(() => {\n    fetchGraphData();\n    if (selectedDoctor && appointmentTime && appointmentDate && !isTimeAvailable()) {\n      Swal.fire(\"Unavailable Time Slot\", \"The selected time is not available for this doctor. Please choose a different time.\", \"error\");\n    }\n  }, [appointmentDate, appointmentTime, selectedDoctor, fetchGraphData, isTimeAvailable]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"dashboardsection\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-start\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-start mt-3\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Track Your Sugar Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"border border-3 border-success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row g-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  className: \"form-control\",\n                  id: \"beforeEating\",\n                  name: \"beforeEating\",\n                  autoComplete: \"off\",\n                  required: true,\n                  placeholder: \"Before Eating\",\n                  value: beforeEating,\n                  onChange: e => setBeforeEating(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 667,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"beforeEating\",\n                  children: \"Sugar Level (Before Eating)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 677,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  className: \"form-control\",\n                  id: \"afterEating\",\n                  name: \"afterEating\",\n                  autoComplete: \"off\",\n                  required: true,\n                  placeholder: \"After Eating\",\n                  value: afterEating,\n                  onChange: e => setAfterEating(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 683,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"afterEating\",\n                  children: \"Sugar Level (After Eating)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 693,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4 d-flex align-items-center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn button btn-success w-100\",\n                onClick: handleAddSugarData,\n                disabled: !beforeEating || !afterEating,\n                children: \"Add Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Sugar Level Graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"border border-3 border-success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn button ${selectedRange === \"week\" ? \"btn-success\" : \"btn-outline-success\"} me-2`,\n              onClick: () => setSelectedRange(\"week\"),\n              children: \"Weekly View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn button ${selectedRange === \"month\" ? \"btn-success\" : \"btn-outline-success\"}`,\n              onClick: () => setSelectedRange(\"month\"),\n              children: \"Monthly View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-5\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: generateChartData(),\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 731,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"beforeEating\",\n                stroke: \"#8884d8\",\n                strokeWidth: 3,\n                dot: {\n                  r: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"afterEating\",\n                stroke: \"#82ca9d\",\n                strokeWidth: 3,\n                dot: {\n                  r: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Book an Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"border border-3 border-success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row g-3 mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-floating\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                id: \"floatingDoctor\",\n                value: selectedDoctor,\n                onChange: handleChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a Doctor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 19\n                }, this), doctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: doctor.doctorName,\n                  children: [doctor.doctorName, \" - \", doctor.specialization]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 753,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"floatingDoctor\",\n                children: \"Choose a Doctor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-floating\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"form-control\",\n                id: \"floatingDate\",\n                value: appointmentDate,\n                onChange: e => setAppointmentDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"floatingDate\",\n                children: \"Select Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 769,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-floating\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                className: \"form-control\",\n                id: \"floatingTime\",\n                value: appointmentTime,\n                onChange: e => setAppointmentTime(e.target.value),\n                disabled: !selectedDoctor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"floatingTime\",\n                children: \"Select Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 d-flex justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success appointment-btn\",\n              onClick: handleBookAppointment,\n              disabled: !selectedDoctor || !appointmentDate || !appointmentTime || !isTimeAvailable(),\n              children: \"Book Appointment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"My Appointments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"border border-3 border-success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 13\n        }, this), appointments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted\",\n          children: \"No active appointments.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group\",\n          children: appointments.map((appointment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item d-flex justify-content-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [appointment.appointmentDate, \" -  \", appointment.appointmentTime, \" - \", appointment.doctorName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger btn-sm\",\n              onClick: () => handleCancelAppointment(index),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 814,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 653,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"ZC2voGGWK8rJYN/oZ5+DJvVWKDA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","Footer","LineChart","Line","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","Swal","addAppointment","getAllAppointments","deleteAppointment","addData","getALLGraphData","getPatientId","getAllDoctors","getAllScheduleTimes","jsxDEV","_jsxDEV","Dashboard","_s","sugarData","setSugarData","beforeEating","setBeforeEating","afterEating","setAfterEating","selectedRange","setSelectedRange","doctors","setDoctors","selectedDoctor","setSelectedDoctor","appointmentDate","setAppointmentDate","appointmentTime","setAppointmentTime","appointments","setAppointments","availableTimeSlots","setAvailableTimeSlots","user","JSON","parse","localStorage","getItem","userId","user_id","userName","name","handleChange","e","target","value","fetchGraphData","patient","patientId","data","res","filteredData","filter","item","patient_id","simplified","map","date","dataDate","error","console","log","isTimeAvailable","length","some","slot","from","to","handleBookAppointment","newAppointment","doctorName","fire","handleCancelAppointment","index","appointmentToCancel","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","id","appointment_id","updatedAppointments","_","i","scheduleTime","selectedDoctorName","response","allSchedules","doctorAvailableTimes","schedule","availableSlots","scheduleDate","fromTime","toTime","handleAddSugarData","now","Date","hours","getHours","newData","parseInt","generateChartData","dates","today","setDate","getDate","push","toISOString","split","entry","find","time","reverse","fetchAppointments","filtered","fetchDoctors","loadScheduleTimes","slots","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","autoComplete","required","placeholder","onChange","htmlFor","onClick","disabled","width","height","dataKey","stroke","strokeWidth","dot","r","doctor","specialization","appointment","_c","$RefreshReg$"],"sources":["D:/Kumaran project/medilocker/src/pages/Dashboard.jsx"],"sourcesContent":["// import React, { useState , useEffect } from \"react\";\r\n// import Header from \"../components/Header\";\r\n// import Footer from \"../components/Footer\";\r\n// import { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\n// import Swal from \"sweetalert2\";\r\n// import { addAppointment, getAllAppointments, deleteAppointment } from \"../api/AppointmentService\";\r\n// import { addData, getALLGraphData } from \"../api/GraphService\";\r\n// import { getPatientId } from \"../api/PatientService\";\r\n// import { getAllDoctors } from \"../api/DoctorService\";\r\n// import { getAllScheduleTimes } from \"../api/ScheduleService\";\r\n\r\n// const Dashboard = () => {\r\n//   const [sugarData, setSugarData] = useState([]);\r\n//   const [beforeEating, setBeforeEating] = useState(\"\");\r\n//   const [afterEating, setAfterEating] = useState(\"\");\r\n//   const [selectedRange, setSelectedRange] = useState(\"week\");\r\n\r\n//   const [doctors, setDoctors] = useState([]);\r\n//   const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n\r\n//   const [appointmentDate, setAppointmentDate] = useState(\"\");\r\n//   const [appointmentTime, setAppointmentTime] = useState(\"\");\r\n//   const [appointments, setAppointments] = useState([]);\r\n\r\n//   const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\r\n\r\n//   const user = JSON.parse(localStorage.getItem(\"users\"));\r\n//   const userId = user.user_id;\r\n//   const userName = user.name;\r\n//   // console.log(\"Logged-in user:\", user);\r\n\r\n\r\n//   const handleChange = (e) => {\r\n//     setSelectedDoctor(e.target.value);\r\n//   };\r\n\r\n//   const handleBookAppointment = async() => {\r\n//     if (selectedDoctor && appointmentDate && appointmentTime) {\r\n//       const newAppointment = {\r\n//         doctorName: selectedDoctor,\r\n//         appointmentDate: appointmentDate,\r\n//         appointmentTime: appointmentTime,\r\n//       };\r\n      \r\n//       const patient = await getPatientId(userId);\r\n//       const patientId = patient.data;\r\n//       // console.log(\"PatientId :\",patientId);\r\n\r\n//       try {\r\n//         await addAppointment(patientId, newAppointment); \r\n//         setAppointments([...appointments, newAppointment]);\r\n//         setSelectedDoctor(\"\");\r\n//         setAppointmentDate(\"\");\r\n//         setAppointmentTime(\"\");\r\n//         Swal.fire(\"Appointment Booked!\", `Appointment for ${selectedDoctor} on ${appointmentDate} at ${appointmentTime} Booked Successfully!`, \"success\");\r\n//       } catch (error) {\r\n//         Swal.fire(\"Error\", \"Failed to book appointment.\", \"error\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleCancelAppointment = async (index) => {\r\n//     const appointmentToCancel = appointments[index];\r\n  \r\n//     Swal.fire({\r\n//       title: \"Are you sure?\",\r\n//       text: \"Do you want to cancel this appointment?\",\r\n//       icon: \"warning\",\r\n//       showCancelButton: true,\r\n//       confirmButtonColor: '#dc3545',\r\n//       cancelButtonColor: '#6c757d',\r\n//       confirmButtonText: 'Yes, cancel it!',\r\n//     }).then(async (result) => {\r\n//       if (result.isConfirmed) {\r\n//         try {\r\n//           const id = appointmentToCancel.appointment_id;\r\n//           // console.log(\"appointment_id:\",id);\r\n//           await deleteAppointment(id); \r\n//           const updatedAppointments = appointments.filter((_, i) => i !== index);\r\n//           setAppointments(updatedAppointments);\r\n//           Swal.fire(\"Cancelled!\", \"The appointment has been cancelled.\", \"success\");\r\n//         } catch (error) {\r\n//           Swal.fire(\"Error\", \"Failed to cancel appointment in backend.\", \"error\");\r\n//         }\r\n//       }\r\n//     });\r\n//   };\r\n  \r\n//   const scheduleTime = async (selectedDoctorName) => {\r\n//     try {\r\n//       const response = await getAllScheduleTimes();\r\n//       const allSchedules = response.data;\r\n//       const doctorAvailableTimes = allSchedules.filter(\r\n//         (schedule) => schedule.doctorName === selectedDoctorName\r\n//       );\r\n//       const availableSlots = doctorAvailableTimes.map((schedule) => ({\r\n//         date: schedule.scheduleDate,\r\n//         from: schedule.fromTime,\r\n//         to: schedule.toTime,\r\n//       }));\r\n  \r\n//       return availableSlots;\r\n//     } catch (error) {\r\n//       console.error(\"Failed to fetch schedule times:\", error);\r\n//       return [];\r\n//     }\r\n//   };\r\n\r\n//   const handleAddSugarData = async() => {\r\n//     const now = new Date();\r\n//     const hours = now.getHours();\r\n\r\n//     const patient = await getPatientId(userId);\r\n//     const patientId = patient.data;\r\n//     // console.log(\"PatientId :\",patientId);\r\n    \r\n//     if (hours < 6 || hours >= 8) {\r\n//       Swal.fire(\"Error\", \"Sugar level data can only be uploaded between 6 AM and 8 AM.\", \"error\");\r\n//       return;\r\n//     }\r\n\r\n//     if (beforeEating && afterEating) {\r\n//       const newData = {\r\n//         beforeEating: parseInt(beforeEating),\r\n//         afterEating: parseInt(afterEating)\r\n//       };\r\n//       try {\r\n//         await addData(patientId, newData);\r\n//         setSugarData([...sugarData, newData]);\r\n//         setBeforeEating(\"\");\r\n//         setAfterEating(\"\");\r\n//         await fetchGraphData();\r\n//         Swal.fire(\"Valued Added!\", \"Sugar level Data Updated.\", \"success\");\r\n//       } catch (error) {\r\n//         Swal.fire(\"Error\", \"Failed to upload data.\", \"error\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const generateChartData = () => {\r\n//     let dates = [];\r\n//     let today = new Date();\r\n  \r\n//     for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\r\n//       let date = new Date(today);\r\n//       date.setDate(today.getDate() - i);\r\n//       dates.push(date.toISOString().split(\"T\")[0]);\r\n//     }\r\n  \r\n//     return dates\r\n//       .map((date) => {\r\n//         let entry = sugarData.find((data) => data.date === date); \r\n//         return entry\r\n//           ? { ...entry, time: date }\r\n//           : { time: date, beforeEating: null, afterEating: null };\r\n//       })\r\n//       .reverse();\r\n//   };\r\n\r\n//   useEffect(() => {  \r\n\r\n//     const fetchGraphData = async () => {\r\n//       try{\r\n//       const patient = await getPatientId(userId);\r\n//       const patientId = patient.data;\r\n  \r\n//       const res = await getALLGraphData(); \r\n//       const filteredData = res.data.filter(item => item.patient.patient_id === patientId);\r\n      \r\n//       const simplified = filteredData.map(item => ({\r\n//         date: item.dataDate,\r\n//         beforeEating: item.beforeEating,\r\n//         afterEating: item.afterEating,\r\n//       }));\r\n    \r\n//       setSugarData(simplified);\r\n//       // console.log(\"sugar data:\",simplified);\r\n//       }catch(error){\r\n//         console.log(\"error fetching sugar data\",error);\r\n//       }\r\n//     };\r\n  \r\n//     const fetchAppointments = async () => {\r\n//       try{\r\n//         const patient = await getPatientId(userId);\r\n//         const patientId = patient.data;\r\n  \r\n//         const response = await getAllAppointments();\r\n//         const filtered = response.data.filter(item => item.patient.patient_id === patientId);\r\n  \r\n//         setAppointments(filtered);\r\n//         // console.log(\"Appointments :\" , filtered);\r\n//       }catch(error){\r\n//         console.log(\"Error fetching appointments\",error);\r\n//       }\r\n//     };\r\n  \r\n//     const fetchDoctors = async () => {\r\n//       try {\r\n//         const res = await getAllDoctors();\r\n//         setDoctors(res.data);\r\n//         // console.log(\"doctors :\",res.data); \r\n//       } catch (error) {\r\n//         console.error(\"Failed to fetch doctors\", error);\r\n//       }\r\n//     };\r\n  \r\n//     const loadScheduleTimes = async () => {\r\n//       if (selectedDoctor) {\r\n//         const slots = await scheduleTime(selectedDoctor);\r\n//         setAvailableTimeSlots(slots);\r\n//       } else {\r\n//         setAvailableTimeSlots([]);\r\n//       }\r\n//     };\r\n  \r\n//     const isTimeAvailable = () => {\r\n//       if (!appointmentTime || !appointmentDate || availableTimeSlots.length === 0) return false;\r\n    \r\n//       return availableTimeSlots.some(slot => {\r\n//         return slot.date === appointmentDate && appointmentTime >= slot.from && appointmentTime <= slot.to;\r\n//       });\r\n//     };\r\n\r\n//     fetchGraphData();\r\n//     fetchDoctors();\r\n//     fetchAppointments();\r\n//     loadScheduleTimes();\r\n//     if (selectedDoctor && appointmentTime && appointmentDate && !isTimeAvailable()) {\r\n//       Swal.fire(\"Unavailable Time Slot\",\"The selected time is not available for this doctor. Please choose a different time.\",\"error\");\r\n//     }\r\n//   }, [appointmentDate,appointmentTime,selectedDoctor,availableTimeSlots,userId]);\r\n\r\n//   return (\r\n//     <div className=\"dashboard\">\r\n//       <Header />\r\n//       <section className=\"dashboardsection\">\r\n//         <div className=\"container mt-4\">\r\n//           <h2 className=\"text-start\">Dashboard</h2>\r\n//           <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\r\n\r\n//           {/* patient sugar detail graph */}\r\n//           <div className=\"mt-5\">\r\n//             <h4>Track Your Sugar Levels</h4>\r\n//             <hr className=\"border border-3 border-success\" />\r\n//             <div className=\"row g-3\">\r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     className=\"form-control\"\r\n//                     id=\"beforeEating\"\r\n//                     name=\"beforeEating\"\r\n//                     autoComplete=\"off\"\r\n//                     required\r\n//                     placeholder=\"Before Eating\"\r\n//                     value={beforeEating}\r\n//                     onChange={(e) => setBeforeEating(e.target.value)}/>\r\n//                   <label htmlFor=\"beforeEating\">Sugar Level (Before Eating)</label>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     className=\"form-control\"\r\n//                     id=\"afterEating\"\r\n//                     name=\"afterEating\"\r\n//                     autoComplete=\"off\"\r\n//                     required\r\n//                     placeholder=\"After Eating\"\r\n//                     value={afterEating}\r\n//                     onChange={(e) => setAfterEating(e.target.value)}/>\r\n//                   <label htmlFor=\"afterEating\">Sugar Level (After Eating)</label>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"col-md-4 d-flex align-items-center\">\r\n//                 <button\r\n//                   className=\"btn button btn-success w-100\"\r\n//                   onClick={handleAddSugarData}\r\n//                   disabled={!beforeEating || !afterEating}>\r\n//                   Add Data\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* graph */}\r\n//           <div className=\"mt-5\">\r\n//             <h4>Sugar Level Graph</h4>\r\n//             <hr className=\"border border-3 border-success\" />\r\n//             <div className=\"d-flex\">\r\n//               <button\r\n//                 className={`btn button ${selectedRange === \"week\" ? \"btn-success\" : \"btn-outline-success\"} me-2`}\r\n//                 onClick={() => setSelectedRange(\"week\")}>\r\n//                 Weekly View\r\n//               </button>\r\n//               <button\r\n//                 className={`btn button ${selectedRange === \"month\" ? \"btn-success\" : \"btn-outline-success\"}`}\r\n//                 onClick={() => setSelectedRange(\"month\")}>\r\n//                 Monthly View\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"mt-5\">\r\n//             <ResponsiveContainer width=\"100%\" height={300}>\r\n//              <LineChart data={generateChartData()}>\r\n//                  <XAxis dataKey=\"time\" />\r\n//                 <YAxis />\r\n//                 <Tooltip />\r\n//                 <Legend />               \r\n//                 <Line type=\"monotone\" dataKey=\"beforeEating\" stroke=\"#8884d8\" strokeWidth={3} dot={{ r: 5 }} />\r\n//                 <Line type=\"monotone\" dataKey=\"afterEating\" stroke=\"#82ca9d\" strokeWidth={3} dot={{ r: 5 }} />\r\n//               </LineChart>  \r\n//             </ResponsiveContainer>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* book appointment */}\r\n//         <div className=\"mt-5\">\r\n//           <h4>Book an Appointment</h4>\r\n//           <hr className=\"border border-3 border-success\" />\r\n//             <div className=\"row g-3 mt-2\">\r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <select className=\"form-control\"\r\n//                     id=\"floatingDoctor\"\r\n//                     value={selectedDoctor}\r\n//                     onChange={handleChange}>\r\n//                     <option value=\"\">Select a Doctor</option>\r\n//                     {doctors.map((doctor, index) => (\r\n//                       <option key={index} value={doctor.doctorName}>\r\n//                         {doctor.doctorName} - {doctor.specialization}\r\n//                       </option>\r\n//                     ))}\r\n//                   </select>\r\n//                   <label htmlFor=\"floatingDoctor\">Choose a Doctor</label>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <input type=\"date\"\r\n//                     className=\"form-control\"\r\n//                     id=\"floatingDate\"\r\n//                     value={appointmentDate}\r\n//                     onChange={(e) => setAppointmentDate(e.target.value)}/>\r\n//                   <label htmlFor=\"floatingDate\">Select Date</label>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               <div className=\"col-md-4\">\r\n//                 <div className=\"form-floating\">\r\n//                   <input type=\"time\"\r\n//                     className=\"form-control\"\r\n//                     id=\"floatingTime\"\r\n//                     value={appointmentTime}\r\n//                     onChange={(e) => setAppointmentTime(e.target.value)}\r\n//                     disabled={!selectedDoctor}/>\r\n//                   <label htmlFor=\"floatingTime\">Select Time</label>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"col-md-12 d-flex justify-content-end\">\r\n//                 <button className=\"btn btn-success appointment-btn\"\r\n//                   onClick={handleBookAppointment}\r\n//                   disabled={\r\n//                     !selectedDoctor ||\r\n//                     !appointmentDate ||\r\n//                     !appointmentTime ||\r\n//                     !isTimeAvailable()\r\n//                   }>\r\n//                     Book Appointment\r\n//                 </button>\r\n//               </div>\r\n\r\n//             </div>\r\n//         </div>\r\n\r\n//             {/* my appointments */}\r\n//           <div className=\"mt-5\">\r\n//             <h4>My Appointments</h4>\r\n//             <hr className=\"border border-3 border-success\" />\r\n//               {appointments.length === 0 ? (\r\n//                 <p className=\"text-muted\">No active appointments.</p>\r\n//               ) : (\r\n//               <ul className=\"list-group\">\r\n//                 {appointments.map((appointment, index) => (\r\n//                   <li key={index} className=\"list-group-item d-flex justify-content-between\">\r\n//                   <span>\r\n//                     {appointment.appointmentDate} -  {appointment.appointmentTime} - {appointment.doctorName}\r\n//                   </span>\r\n//                   <button className=\"btn btn-danger btn-sm\"\r\n//                     onClick={() => handleCancelAppointment(index)}>\r\n//                     Cancel\r\n//                   </button>\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             )}\r\n//           </div>\r\n\r\n//       </section>\r\n//       <Footer />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\nimport React, { useState, useEffect , useCallback } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\nimport Swal from \"sweetalert2\";\r\nimport { addAppointment, getAllAppointments, deleteAppointment } from \"../api/AppointmentService\";\r\nimport { addData, getALLGraphData } from \"../api/GraphService\";\r\nimport { getPatientId } from \"../api/PatientService\";\r\nimport { getAllDoctors } from \"../api/DoctorService\";\r\nimport { getAllScheduleTimes } from \"../api/ScheduleService\";\r\n\r\nconst Dashboard = () => {\r\n  const [sugarData, setSugarData] = useState([]);\r\n  const [beforeEating, setBeforeEating] = useState(\"\");\r\n  const [afterEating, setAfterEating] = useState(\"\");\r\n  const [selectedRange, setSelectedRange] = useState(\"week\");\r\n\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n\r\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\r\n  const [appointmentTime, setAppointmentTime] = useState(\"\");\r\n  const [appointments, setAppointments] = useState([]);\r\n\r\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\r\n\r\n  const user = JSON.parse(localStorage.getItem(\"users\"));\r\n  const userId = user.user_id;\r\n  const userName = user.name;\r\n  // console.log(\"Logged-in user:\", user);\r\n\r\n  const handleChange = (e) => {\r\n    setSelectedDoctor(e.target.value);\r\n  };\r\n\r\n  const fetchGraphData = useCallback(async () => {\r\n    try {\r\n      const patient = await getPatientId(userId);\r\n      const patientId = patient.data;\r\n  \r\n      const res = await getALLGraphData(); \r\n      const filteredData = res.data.filter(item => item.patient.patient_id === patientId);\r\n      \r\n      const simplified = filteredData.map(item => ({\r\n        date: item.dataDate,\r\n        beforeEating: item.beforeEating,\r\n        afterEating: item.afterEating,\r\n      }));\r\n    \r\n      setSugarData(simplified);\r\n    } catch (error) {\r\n      console.log(\"error fetching sugar data\", error);\r\n    }\r\n  }, [userId]);\r\n  \r\n  const isTimeAvailable = useCallback(() => {\r\n    if (!appointmentTime || !appointmentDate || availableTimeSlots.length === 0) return false;\r\n    \r\n    return availableTimeSlots.some(slot => {\r\n      return slot.date === appointmentDate && appointmentTime >= slot.from && appointmentTime <= slot.to;\r\n    });\r\n  }, [appointmentTime, appointmentDate, availableTimeSlots]);\r\n\r\n  const handleBookAppointment = async() => {\r\n    if (selectedDoctor && appointmentDate && appointmentTime) {\r\n      const newAppointment = {\r\n        doctorName: selectedDoctor,\r\n        appointmentDate: appointmentDate,\r\n        appointmentTime: appointmentTime,\r\n      };\r\n      \r\n      const patient = await getPatientId(userId);\r\n      const patientId = patient.data;\r\n      // console.log(\"PatientId :\", patientId);\r\n\r\n      try {\r\n        await addAppointment(patientId, newAppointment); \r\n        setAppointments([...appointments, newAppointment]);\r\n        setSelectedDoctor(\"\");\r\n        setAppointmentDate(\"\");\r\n        setAppointmentTime(\"\");\r\n        Swal.fire(\"Appointment Booked!\", `Appointment for ${selectedDoctor} on ${appointmentDate} at ${appointmentTime} Booked Successfully!`, \"success\");\r\n      } catch (error) {\r\n        Swal.fire(\"Error\", \"Failed to book appointment.\", \"error\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancelAppointment = async (index) => {\r\n    const appointmentToCancel = appointments[index];\r\n  \r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"Do you want to cancel this appointment?\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#dc3545',\r\n      cancelButtonColor: '#6c757d',\r\n      confirmButtonText: 'Yes, cancel it!',\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        try {\r\n          const id = appointmentToCancel.appointment_id;\r\n          // console.log(\"appointment_id:\", id);\r\n          await deleteAppointment(id); \r\n          const updatedAppointments = appointments.filter((_, i) => i !== index);\r\n          setAppointments(updatedAppointments);\r\n          Swal.fire(\"Cancelled!\", \"The appointment has been cancelled.\", \"success\");\r\n        } catch (error) {\r\n          Swal.fire(\"Error\", \"Failed to cancel appointment in backend.\", \"error\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n  \r\n  const scheduleTime = async (selectedDoctorName) => {\r\n    try {\r\n      const response = await getAllScheduleTimes();\r\n      const allSchedules = response.data;\r\n      const doctorAvailableTimes = allSchedules.filter(\r\n        (schedule) => schedule.doctorName === selectedDoctorName\r\n      );\r\n      const availableSlots = doctorAvailableTimes.map((schedule) => ({\r\n        date: schedule.scheduleDate,\r\n        from: schedule.fromTime,\r\n        to: schedule.toTime,\r\n      }));\r\n  \r\n      return availableSlots;\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch schedule times:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const handleAddSugarData = async() => {\r\n    const now = new Date();\r\n    const hours = now.getHours();\r\n\r\n    const patient = await getPatientId(userId);\r\n    const patientId = patient.data;\r\n    // console.log(\"PatientId :\", patientId);\r\n    \r\n    if (hours < 6 || hours >= 8) {\r\n      Swal.fire(\"Error\", \"Sugar level data can only be uploaded between 6 AM and 8 AM.\", \"error\");\r\n      return;\r\n    }\r\n\r\n    if (beforeEating && afterEating) {\r\n      const newData = {\r\n        beforeEating: parseInt(beforeEating),\r\n        afterEating: parseInt(afterEating)\r\n      };\r\n      try {\r\n        await addData(patientId, newData);\r\n        setSugarData([...sugarData, newData]);\r\n        setBeforeEating(\"\");\r\n        setAfterEating(\"\");\r\n        await fetchGraphData();\r\n        Swal.fire(\"Valued Added!\", \"Sugar level Data Updated.\", \"success\");\r\n      } catch (error) {\r\n        Swal.fire(\"Error\", \"Failed to upload data.\", \"error\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const generateChartData = () => {\r\n    let dates = [];\r\n    let today = new Date();\r\n  \r\n    for (let i = 0; i < (selectedRange === \"week\" ? 7 : 30); i++) {\r\n      let date = new Date(today);\r\n      date.setDate(today.getDate() - i);\r\n      dates.push(date.toISOString().split(\"T\")[0]);\r\n    }\r\n  \r\n    return dates\r\n      .map((date) => {\r\n        let entry = sugarData.find((data) => data.date === date); \r\n        return entry\r\n          ? { ...entry, time: date }\r\n          : { time: date, beforeEating: null, afterEating: null };\r\n      })\r\n      .reverse();\r\n  };\r\n\r\n  useEffect(()=>{\r\n    const fetchAppointments = async () => {\r\n      try {\r\n        const patient = await getPatientId(userId);\r\n        const patientId = patient.data;\r\n  \r\n        const response = await getAllAppointments();\r\n        const filtered = response.data.filter(item => item.patient.patient_id === patientId);\r\n  \r\n        setAppointments(filtered);\r\n        // console.log(\"Appointments :\", filtered);\r\n      } catch (error) {\r\n        console.log(\"Error fetching appointments\", error);\r\n      }\r\n    };\r\n\r\n    fetchAppointments();\r\n  },[userId]);\r\n\r\n  useEffect(()=>{\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        const res = await getAllDoctors();\r\n        setDoctors(res.data);\r\n        // console.log(\"doctors :\", res.data); \r\n      } catch (error) {\r\n        console.error(\"Failed to fetch doctors\", error);\r\n      }\r\n    };\r\n    fetchDoctors();\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    const loadScheduleTimes = async () => {\r\n      if (selectedDoctor) {\r\n        const slots = await scheduleTime(selectedDoctor);\r\n        setAvailableTimeSlots(slots);\r\n      } else {\r\n        setAvailableTimeSlots([]);\r\n      }\r\n    };\r\n    loadScheduleTimes();\r\n  },[selectedDoctor])\r\n\r\n\r\n  useEffect(() => {  \r\n    fetchGraphData();\r\n    \r\n    if (selectedDoctor && appointmentTime && appointmentDate && !isTimeAvailable()) {\r\n      Swal.fire(\"Unavailable Time Slot\", \"The selected time is not available for this doctor. Please choose a different time.\", \"error\");\r\n    }\r\n  }, [appointmentDate, appointmentTime, selectedDoctor, fetchGraphData,isTimeAvailable]);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Header />\r\n      <section className=\"dashboardsection\">\r\n        <div className=\"container mt-4\">\r\n          <h2 className=\"text-start\">Dashboard</h2>\r\n          <h3 className=\"text-start mt-3\">Welcome, {userName}!</h3>\r\n\r\n          {/* patient sugar detail graph */}\r\n          <div className=\"mt-5\">\r\n            <h4>Track Your Sugar Levels</h4>\r\n            <hr className=\"border border-3 border-success\" />\r\n            <div className=\"row g-3\">\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    id=\"beforeEating\"\r\n                    name=\"beforeEating\"\r\n                    autoComplete=\"off\"\r\n                    required\r\n                    placeholder=\"Before Eating\"\r\n                    value={beforeEating}\r\n                    onChange={(e) => setBeforeEating(e.target.value)}/>\r\n                  <label htmlFor=\"beforeEating\">Sugar Level (Before Eating)</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    id=\"afterEating\"\r\n                    name=\"afterEating\"\r\n                    autoComplete=\"off\"\r\n                    required\r\n                    placeholder=\"After Eating\"\r\n                    value={afterEating}\r\n                    onChange={(e) => setAfterEating(e.target.value)}/>\r\n                  <label htmlFor=\"afterEating\">Sugar Level (After Eating)</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-md-4 d-flex align-items-center\">\r\n                <button\r\n                  className=\"btn button btn-success w-100\"\r\n                  onClick={handleAddSugarData}\r\n                  disabled={!beforeEating || !afterEating}>\r\n                  Add Data\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* graph */}\r\n          <div className=\"mt-5\">\r\n            <h4>Sugar Level Graph</h4>\r\n            <hr className=\"border border-3 border-success\" />\r\n            <div className=\"d-flex\">\r\n              <button\r\n                className={`btn button ${selectedRange === \"week\" ? \"btn-success\" : \"btn-outline-success\"} me-2`}\r\n                onClick={() => setSelectedRange(\"week\")}>\r\n                Weekly View\r\n              </button>\r\n              <button\r\n                className={`btn button ${selectedRange === \"month\" ? \"btn-success\" : \"btn-outline-success\"}`}\r\n                onClick={() => setSelectedRange(\"month\")}>\r\n                Monthly View\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-5\">\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n             <LineChart data={generateChartData()}>\r\n                 <XAxis dataKey=\"time\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />               \r\n                <Line type=\"monotone\" dataKey=\"beforeEating\" stroke=\"#8884d8\" strokeWidth={3} dot={{ r: 5 }} />\r\n                <Line type=\"monotone\" dataKey=\"afterEating\" stroke=\"#82ca9d\" strokeWidth={3} dot={{ r: 5 }} />\r\n              </LineChart>  \r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n\r\n        {/* book appointment */}\r\n        <div className=\"mt-5\">\r\n          <h4>Book an Appointment</h4>\r\n          <hr className=\"border border-3 border-success\" />\r\n            <div className=\"row g-3 mt-2\">\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <select className=\"form-control\"\r\n                    id=\"floatingDoctor\"\r\n                    value={selectedDoctor}\r\n                    onChange={handleChange}>\r\n                  <option value=\"\">Select a Doctor</option>\r\n                  {doctors.map((doctor, index) => (\r\n                    <option key={index} value={doctor.doctorName}>\r\n                      {doctor.doctorName} - {doctor.specialization}\r\n                    </option>\r\n                  ))}\r\n                  </select>\r\n                  <label htmlFor=\"floatingDoctor\">Choose a Doctor</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <input type=\"date\"\r\n                    className=\"form-control\"\r\n                    id=\"floatingDate\"\r\n                    value={appointmentDate}\r\n                    onChange={(e) => setAppointmentDate(e.target.value)}/>\r\n                  <label htmlFor=\"floatingDate\">Select Date</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-floating\">\r\n                  <input type=\"time\"\r\n                    className=\"form-control\"\r\n                    id=\"floatingTime\"\r\n                    value={appointmentTime}\r\n                    onChange={(e) => setAppointmentTime(e.target.value)}\r\n                    disabled={!selectedDoctor}/>\r\n                  <label htmlFor=\"floatingTime\">Select Time</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-md-12 d-flex justify-content-end\">\r\n                <button className=\"btn btn-success appointment-btn\"\r\n                  onClick={handleBookAppointment}\r\n                  disabled={\r\n                    !selectedDoctor ||\r\n                    !appointmentDate ||\r\n                    !appointmentTime ||\r\n                    !isTimeAvailable()\r\n                  }>\r\n                    Book Appointment\r\n                </button>\r\n              </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n            {/* my appointments */}\r\n          <div className=\"mt-5\">\r\n            <h4>My Appointments</h4>\r\n            <hr className=\"border border-3 border-success\" />\r\n              {appointments.length === 0 ? (\r\n                <p className=\"text-muted\">No active appointments.</p>\r\n              ) : (\r\n              <ul className=\"list-group\">\r\n                {appointments.map((appointment, index) => (\r\n                  <li key={index} className=\"list-group-item d-flex justify-content-between\">\r\n                  <span>\r\n                    {appointment.appointmentDate} -  {appointment.appointmentTime} - {appointment.doctorName}\r\n                  </span>\r\n                  <button className=\"btn btn-danger btn-sm\"\r\n                    onClick={() => handleCancelAppointment(index)}>\r\n                    Cancel\r\n                  </button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n\r\n      </section>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAGC,WAAW,QAAQ,OAAO;AAChE,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAC9F,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,cAAc,EAAEC,kBAAkB,EAAEC,iBAAiB,QAAQ,2BAA2B;AACjG,SAASC,OAAO,EAAEC,eAAe,QAAQ,qBAAqB;AAC9D,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,mBAAmB,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}