{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kumaran project\\\\medilocker\\\\src\\\\pages\\\\Pharmacy.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport axios from \"axios\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\nconst Pharmacy = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [pharmacies, setPharmacies] = useState([]);\n  useEffect(() => {\n    // Step 1: Try to get location from browser\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setLocation({\n        lat: latitude,\n        lng: longitude\n      });\n      fetchPharmacies(latitude, longitude);\n    }, async () => {\n      // Step 2: If denied, fetch location from IP\n      try {\n        const res = await axios.get(\"https://ipapi.co/json/\");\n        setLocation({\n          lat: res.data.latitude,\n          lng: res.data.longitude\n        });\n        fetchPharmacies(res.data.latitude, res.data.longitude);\n      } catch (error) {\n        console.error(\"Error fetching location from IP:\", error);\n        // Step 3: If IP lookup fails, use Chennai as fallback\n        setLocation({\n          lat: 13.0827,\n          lng: 80.2707\n        });\n        fetchPharmacies(13.0827, 80.2707);\n      }\n    });\n  }, []);\n  const fetchPharmacies = async (lat, lng) => {\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=pharmacy+near+${lat},${lng}`);\n      setPharmacies(response.data);\n    } catch (error) {\n      console.error(\"Error fetching pharmacies:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pharmacy\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"pharmacysection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Find NearBy Pharmacy's\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: location ? /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [location.lat, location.lng],\n          zoom: 12,\n          style: {\n            height: \"500px\",\n            width: \"100%\",\n            border: \"5px solid\",\n            borderRadius: \"50px\",\n            color: \"#058f5a\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Marker, {\n            position: [location.lat, location.lng],\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: \"Your Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), pharmacies.map((pharmacy, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: [pharmacy.lat, pharmacy.lon],\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: pharmacy.display_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 25\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading map...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Pharmacy, \"PqXTRXOdV2PHFeo2GnXA0lBX7ww=\");\n_c = Pharmacy;\nexport default Pharmacy;\nvar _c;\n$RefreshReg$(_c, \"Pharmacy\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","MapContainer","TileLayer","Marker","Popup","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Pharmacy","_s","location","setLocation","pharmacies","setPharmacies","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","fetchPharmacies","res","get","data","error","console","response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","border","borderRadius","color","url","map","pharmacy","index","lon","display_name","_c","$RefreshReg$"],"sources":["D:/Kumaran project/medilocker/src/pages/Pharmacy.jsx"],"sourcesContent":["import React,{ useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport axios from \"axios\";\r\nimport L from \"leaflet\";\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\nconst Pharmacy = () => {\r\n\r\n    const [location, setLocation] = useState(null);\r\n    const [pharmacies, setPharmacies] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      // Step 1: Try to get location from browser\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setLocation({ lat: latitude, lng: longitude });\r\n          fetchPharmacies(latitude, longitude);\r\n        },\r\n        async () => {\r\n          // Step 2: If denied, fetch location from IP\r\n          try {\r\n            const res = await axios.get(\"https://ipapi.co/json/\");\r\n            setLocation({ lat: res.data.latitude, lng: res.data.longitude });\r\n            fetchPharmacies(res.data.latitude, res.data.longitude);\r\n          } catch (error) {\r\n            console.error(\"Error fetching location from IP:\", error);\r\n            // Step 3: If IP lookup fails, use Chennai as fallback\r\n            setLocation({ lat: 13.0827, lng: 80.2707 });\r\n            fetchPharmacies(13.0827, 80.2707);\r\n          }\r\n        }\r\n      );\r\n    }, []);\r\n  \r\n    const fetchPharmacies = async (lat, lng) => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=pharmacy+near+${lat},${lng}`\r\n        );\r\n        setPharmacies(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching pharmacies:\", error);\r\n      }\r\n    };\r\n\r\nreturn(\r\n    <div className=\"pharmacy\">\r\n        <Header/>\r\n        <section className=\"pharmacysection\">\r\n\r\n            <h3>Find NearBy Pharmacy's</h3>\r\n            <br />\r\n            <div>\r\n                {location ? (\r\n                    <MapContainer center={[location.lat, location.lng]} zoom={12} style={{ height: \"500px\", width: \"100%\" ,border:\"5px solid\",borderRadius:\"50px\",color:\"#058f5a\" }}>\r\n                    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    <Marker position={[location.lat, location.lng]}>\r\n                        <Popup>Your Location</Popup>\r\n                    </Marker>\r\n                    {pharmacies.map((pharmacy, index) => (\r\n                    <Marker key={index} position={[pharmacy.lat, pharmacy.lon]}>\r\n                        <Popup>{pharmacy.display_name}</Popup>\r\n                    </Marker>\r\n                    ))}\r\n                    </MapContainer>\r\n                    ) : (\r\n                    <p>Loading map...</p>\r\n                    )}\r\n            </div>\r\n        </section>\r\n        <Footer/>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Pharmacy;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}